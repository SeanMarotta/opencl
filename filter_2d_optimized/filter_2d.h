
//Motion blur 9 * 9 (factor 1/9)
float motion_blur[] = {
  1.0/9.0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1.0/9.0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 1.0/9.0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 1.0/9.0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 1.0/9.0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 1.0/9.0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1.0/9.0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 1.0/9.0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 1.0/9.0
};

float gaussian5[] = {
        1.0 / 273.0,	4.0 / 273.0,	7.0 / 273.0,	4.0 / 273.0,	1.0 / 273.0,
        4.0 / 273.0,	16.0 / 273.0,	26.0 / 273.0,	16.0 / 273.0,	4.0 / 273.0,
        7.0 / 273.0,	26.0 / 273.0,	41.0 / 273.0,	26.0 / 273.0,	7.0 / 273.0,
        4.0 / 273.0,	16.0 / 273.0,	26.0 / 273.0,	16.0 / 273.0,	4.0 / 273.0,
        1.0 / 273.0,	4.0 / 273.0,	7.0 / 273.0,	4.0 / 273.0,	1.0 / 273.0,
};

float neutral3[] = {
        0.0, 0.0, 0.0,
        0.0, 1.0, 0.0,
        0.0, 0.0, 0.0
};

// Averaging filter 5 * 5 (factor 1/25)
float averaging5x5[] = {
  1.0/25.0,1.0/25.0,1.0/25.0,1.0/25.0,1.0/25.0,
  1.0/25.0,1.0/25.0,1.0/25.0,1.0/25.0,1.0/25.0,
  1.0/25.0,1.0/25.0,1.0/25.0,1.0/25.0,1.0/25.0,
  1.0/25.0,1.0/25.0,1.0/25.0,1.0/25.0,1.0/25.0,
  1.0/25.0,1.0/25.0,1.0/25.0,1.0/25.0,1.0/25.0
};

// Averaging filter 15 * 15 (factor 1/225)
float averaging15x15[] = {
        1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,
        1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,
        1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,
        1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,
        1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,
        1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,
        1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,
        1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,
        1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,
        1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,
        1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,
        1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,
        1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,
        1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,
        1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0, 1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,1.0/225.0,
};

// Emboss 3 * 3 (factor 1/25)
float emboss[] = {
  -2, -1,  0,
  -1,  1,  1,
   0,  1,  2
};

float flo[] = {
        0, -1,  0,
        -1,  4,  -1,
        0,  -1,  2
};

// Sharpen 3 * 3 (factor 1/1)
float sharpen[] = {
  -1, -1, -1,
  -1,  9, -1,
  -1, -1, -1
};

// Find edges 5 * 5 (factor 1/1)
float edge[] = {
   0,  0, -1,  0,  0,
   0,  0, -1,  0,  0,
   0,  0,  4,  0,  0,
   0,  0, -1,  0,  0,
   0,  0, -1,  0,  0
};

//Sobel kernel 3 * 3
float sobel[] = {
	1, 0, -1,
	2, 0, -2,
	1, 0, -1
};